# coding: utf-8

"""
    Masking API

    Schema for the Continuous Compliance Engine API  # noqa: E501

    OpenAPI spec version: 5.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dxm.lib.masking_api.api_client import ApiClient


class MappingAlgorithmApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_mapping_algorithm_mappings(self, algorithm_name, file_reference_id, **kwargs):  # noqa: E501
        """Add mappings for mapping algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mapping_algorithm_mappings(algorithm_name, file_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :param str file_reference_id: The reference URI of the uploaded file to be installed. This file should have been uploaded via the /fileUpload endpoint. (required)
        :param str passphrase: The passphrase that an exported CSV mapping file was encrypted with. This is only needed if adding mappings that were previously exported.
        :param str mapping_file_type: The type of the file provided. If PLAINTEXT is chosen, the file is expected to contain newline delimited outputs. If CSV is chosen, the file is expected to conform to RFC4180. Additionally, 2 columns are expected - input and output. The first row of the CSV must be a header.
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_mapping_algorithm_mappings_with_http_info(algorithm_name, file_reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_mapping_algorithm_mappings_with_http_info(algorithm_name, file_reference_id, **kwargs)  # noqa: E501
            return data

    def add_mapping_algorithm_mappings_with_http_info(self, algorithm_name, file_reference_id, **kwargs):  # noqa: E501
        """Add mappings for mapping algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mapping_algorithm_mappings_with_http_info(algorithm_name, file_reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :param str file_reference_id: The reference URI of the uploaded file to be installed. This file should have been uploaded via the /fileUpload endpoint. (required)
        :param str passphrase: The passphrase that an exported CSV mapping file was encrypted with. This is only needed if adding mappings that were previously exported.
        :param str mapping_file_type: The type of the file provided. If PLAINTEXT is chosen, the file is expected to contain newline delimited outputs. If CSV is chosen, the file is expected to conform to RFC4180. Additionally, 2 columns are expected - input and output. The first row of the CSV must be a header.
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algorithm_name', 'file_reference_id', 'passphrase', 'mapping_file_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_mapping_algorithm_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algorithm_name' is set
        if self.api_client.client_side_validation and ('algorithm_name' not in params or
                                                       params['algorithm_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `algorithm_name` when calling `add_mapping_algorithm_mappings`")  # noqa: E501
        # verify the required parameter 'file_reference_id' is set
        if self.api_client.client_side_validation and ('file_reference_id' not in params or
                                                       params['file_reference_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_reference_id` when calling `add_mapping_algorithm_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'algorithm_name' in params:
            path_params['algorithmName'] = params['algorithm_name']  # noqa: E501

        query_params = []
        if 'file_reference_id' in params:
            query_params.append(('fileReferenceId', params['file_reference_id']))  # noqa: E501
        if 'passphrase' in params:
            query_params.append(('passphrase', params['passphrase']))  # noqa: E501
        if 'mapping_file_type' in params:
            query_params.append(('mappingFileType', params['mapping_file_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mapping-algorithms/{algorithmName}/add-mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_mapping_algorithm_mappings(self, algorithm_name, **kwargs):  # noqa: E501
        """Irreversibly delete all saved mappings for mapping algorithm.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mapping_algorithm_mappings(algorithm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_mapping_algorithm_mappings_with_http_info(algorithm_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_mapping_algorithm_mappings_with_http_info(algorithm_name, **kwargs)  # noqa: E501
            return data

    def delete_mapping_algorithm_mappings_with_http_info(self, algorithm_name, **kwargs):  # noqa: E501
        """Irreversibly delete all saved mappings for mapping algorithm.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mapping_algorithm_mappings_with_http_info(algorithm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algorithm_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mapping_algorithm_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algorithm_name' is set
        if self.api_client.client_side_validation and ('algorithm_name' not in params or
                                                       params['algorithm_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `algorithm_name` when calling `delete_mapping_algorithm_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'algorithm_name' in params:
            path_params['algorithmName'] = params['algorithm_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mapping-algorithms/{algorithmName}/delete-mappings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_mappings(self, algorithm_name, passphrase, **kwargs):  # noqa: E501
        """Export mappings for mapping algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_mappings(algorithm_name, passphrase, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :param str passphrase: The passphrase to use to encrypt the mappings in the export file. (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_mappings_with_http_info(algorithm_name, passphrase, **kwargs)  # noqa: E501
        else:
            (data) = self.export_mappings_with_http_info(algorithm_name, passphrase, **kwargs)  # noqa: E501
            return data

    def export_mappings_with_http_info(self, algorithm_name, passphrase, **kwargs):  # noqa: E501
        """Export mappings for mapping algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_mappings_with_http_info(algorithm_name, passphrase, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :param str passphrase: The passphrase to use to encrypt the mappings in the export file. (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algorithm_name', 'passphrase']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algorithm_name' is set
        if self.api_client.client_side_validation and ('algorithm_name' not in params or
                                                       params['algorithm_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `algorithm_name` when calling `export_mappings`")  # noqa: E501
        # verify the required parameter 'passphrase' is set
        if self.api_client.client_side_validation and ('passphrase' not in params or
                                                       params['passphrase'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `passphrase` when calling `export_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'algorithm_name' in params:
            path_params['algorithmName'] = params['algorithm_name']  # noqa: E501

        query_params = []
        if 'passphrase' in params:
            query_params.append(('passphrase', params['passphrase']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mapping-algorithms/{algorithmName}/export-mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mapping_algorithm_stats(self, algorithm_name, **kwargs):  # noqa: E501
        """Get stats for mapping algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mapping_algorithm_stats(algorithm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :return: MappingAlgorithmStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mapping_algorithm_stats_with_http_info(algorithm_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mapping_algorithm_stats_with_http_info(algorithm_name, **kwargs)  # noqa: E501
            return data

    def get_mapping_algorithm_stats_with_http_info(self, algorithm_name, **kwargs):  # noqa: E501
        """Get stats for mapping algorithm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mapping_algorithm_stats_with_http_info(algorithm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :return: MappingAlgorithmStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algorithm_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapping_algorithm_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algorithm_name' is set
        if self.api_client.client_side_validation and ('algorithm_name' not in params or
                                                       params['algorithm_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `algorithm_name` when calling `get_mapping_algorithm_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'algorithm_name' in params:
            path_params['algorithmName'] = params['algorithm_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mapping-algorithms/{algorithmName}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MappingAlgorithmStats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_mapping_algorithm(self, algorithm_name, **kwargs):  # noqa: E501
        """Reset mappings for mapping algorithm.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_mapping_algorithm(algorithm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_mapping_algorithm_with_http_info(algorithm_name, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_mapping_algorithm_with_http_info(algorithm_name, **kwargs)  # noqa: E501
            return data

    def reset_mapping_algorithm_with_http_info(self, algorithm_name, **kwargs):  # noqa: E501
        """Reset mappings for mapping algorithm.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_mapping_algorithm_with_http_info(algorithm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algorithm_name: The name of the mapping algorithm. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algorithm_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_mapping_algorithm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algorithm_name' is set
        if self.api_client.client_side_validation and ('algorithm_name' not in params or
                                                       params['algorithm_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `algorithm_name` when calling `reset_mapping_algorithm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'algorithm_name' in params:
            path_params['algorithmName'] = params['algorithm_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mapping-algorithms/{algorithmName}/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
