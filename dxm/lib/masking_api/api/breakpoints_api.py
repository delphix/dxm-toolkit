# coding: utf-8

"""
    Masking API

    Schema for the Continuous Compliance Engine API  # noqa: E501

    OpenAPI spec version: 5.1.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dxm.lib.masking_api.api_client import ApiClient


class BreakpointsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def await_breakpoint(self, uuid, body, **kwargs):  # noqa: E501
        """Await a breakpoint until it is reached or the operation times out  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.await_breakpoint(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid for the breakpoint to await (required)
        :param BreakpointTimeout body: The timeout for the await call (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.await_breakpoint_with_http_info(uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.await_breakpoint_with_http_info(uuid, body, **kwargs)  # noqa: E501
            return data

    def await_breakpoint_with_http_info(self, uuid, body, **kwargs):  # noqa: E501
        """Await a breakpoint until it is reached or the operation times out  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.await_breakpoint_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid for the breakpoint to await (required)
        :param BreakpointTimeout body: The timeout for the await call (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method await_breakpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `await_breakpoint`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `await_breakpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/breakpoint-instances/{uuid}/await', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_breakpoint_instances(self, **kwargs):  # noqa: E501
        """Get all active breakpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_breakpoint_instances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operation: The breakpoint type for which to get breakpoints.
        :return: list[BreakpointInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_breakpoint_instances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_breakpoint_instances_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_breakpoint_instances_with_http_info(self, **kwargs):  # noqa: E501
        """Get all active breakpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_breakpoint_instances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operation: The breakpoint type for which to get breakpoints.
        :return: list[BreakpointInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_breakpoint_instances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/breakpoint-instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BreakpointInstance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_breakpoint_start_data(self, **kwargs):  # noqa: E501
        """Get all active breakpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_breakpoint_start_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BreakpointStartData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_breakpoint_start_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_breakpoint_start_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_breakpoint_start_data_with_http_info(self, **kwargs):  # noqa: E501
        """Get all active breakpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_breakpoint_start_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BreakpointStartData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_breakpoint_start_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/breakpoint-start-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BreakpointStartData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def play_breakpoint(self, uuid, **kwargs):  # noqa: E501
        """Play a breakpoint such that the product will no longer wait at it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_breakpoint(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid for the breakpoint to play (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.play_breakpoint_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.play_breakpoint_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def play_breakpoint_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Play a breakpoint such that the product will no longer wait at it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.play_breakpoint_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid for the breakpoint to play (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method play_breakpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `play_breakpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/breakpoint-instances/{uuid}/play', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_breakpoint_start_data(self, breakpoint_type, body, **kwargs):  # noqa: E501
        """Update a BreakpointStartData based on its type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_breakpoint_start_data(breakpoint_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str breakpoint_type: The breakpoint type to update (required)
        :param BreakpointStartData body: The updated BreakpointStartData (required)
        :return: BreakpointStartData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_breakpoint_start_data_with_http_info(breakpoint_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_breakpoint_start_data_with_http_info(breakpoint_type, body, **kwargs)  # noqa: E501
            return data

    def update_breakpoint_start_data_with_http_info(self, breakpoint_type, body, **kwargs):  # noqa: E501
        """Update a BreakpointStartData based on its type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_breakpoint_start_data_with_http_info(breakpoint_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str breakpoint_type: The breakpoint type to update (required)
        :param BreakpointStartData body: The updated BreakpointStartData (required)
        :return: BreakpointStartData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['breakpoint_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_breakpoint_start_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'breakpoint_type' is set
        if self.api_client.client_side_validation and ('breakpoint_type' not in params or
                                                       params['breakpoint_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `breakpoint_type` when calling `update_breakpoint_start_data`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_breakpoint_start_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'breakpoint_type' in params:
            path_params['breakpointType'] = params['breakpoint_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/breakpoint-start-data/{breakpointType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BreakpointStartData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
