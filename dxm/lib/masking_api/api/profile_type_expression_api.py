# coding: utf-8

"""
    Masking API

    Schema for the Continuous Compliance Engine API  # noqa: E501

    OpenAPI spec version: 5.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dxm.lib.masking_api.api_client import ApiClient


class ProfileTypeExpressionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_profile_type_expression(self, body, **kwargs):  # noqa: E501
        """Create profile type expression  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_profile_type_expression(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileTypeExpression body: The profile type expression to create (required)
        :return: ProfileTypeExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_profile_type_expression_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_profile_type_expression_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_profile_type_expression_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create profile type expression  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_profile_type_expression_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileTypeExpression body: The profile type expression to create (required)
        :return: ProfileTypeExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_profile_type_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_profile_type_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/profile-type-expressions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileTypeExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_profile_type_expression(self, profile_expression_id, **kwargs):  # noqa: E501
        """Delete profile type expression by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profile_type_expression(profile_expression_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_expression_id: The ID of the profile type expression to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_profile_type_expression_with_http_info(profile_expression_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_profile_type_expression_with_http_info(profile_expression_id, **kwargs)  # noqa: E501
            return data

    def delete_profile_type_expression_with_http_info(self, profile_expression_id, **kwargs):  # noqa: E501
        """Delete profile type expression by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profile_type_expression_with_http_info(profile_expression_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_expression_id: The ID of the profile type expression to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_expression_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_profile_type_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_expression_id' is set
        if self.api_client.client_side_validation and ('profile_expression_id' not in params or
                                                       params['profile_expression_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_expression_id` when calling `delete_profile_type_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_expression_id' in params:
            path_params['profileExpressionId'] = params['profile_expression_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/profile-type-expressions/{profileExpressionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_profile_type_expressions(self, **kwargs):  # noqa: E501
        """Get all profile expressions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_profile_type_expressions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: The page number for which to get profile type expressions. This will default to the first page if excluded
        :param int page_size: The maximum number of objects to return. This will default to the DEFAULT_API_PAGE_SIZE property if not provided
        :return: ProfileTypeExpressionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_profile_type_expressions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_profile_type_expressions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_profile_type_expressions_with_http_info(self, **kwargs):  # noqa: E501
        """Get all profile expressions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_profile_type_expressions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: The page number for which to get profile type expressions. This will default to the first page if excluded
        :param int page_size: The maximum number of objects to return. This will default to the DEFAULT_API_PAGE_SIZE property if not provided
        :return: ProfileTypeExpressionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_profile_type_expressions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/profile-type-expressions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileTypeExpressionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_type_expression_by_id(self, profile_expression_id, **kwargs):  # noqa: E501
        """Get profile expression by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_type_expression_by_id(profile_expression_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_expression_id: The ID of the profile type expression to get (required)
        :return: ProfileTypeExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_type_expression_by_id_with_http_info(profile_expression_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_type_expression_by_id_with_http_info(profile_expression_id, **kwargs)  # noqa: E501
            return data

    def get_profile_type_expression_by_id_with_http_info(self, profile_expression_id, **kwargs):  # noqa: E501
        """Get profile expression by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_type_expression_by_id_with_http_info(profile_expression_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_expression_id: The ID of the profile type expression to get (required)
        :return: ProfileTypeExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_expression_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_type_expression_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_expression_id' is set
        if self.api_client.client_side_validation and ('profile_expression_id' not in params or
                                                       params['profile_expression_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_expression_id` when calling `get_profile_type_expression_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_expression_id' in params:
            path_params['profileExpressionId'] = params['profile_expression_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/profile-type-expressions/{profileExpressionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileTypeExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_profile_type_expression(self, profile_expression_id, body, **kwargs):  # noqa: E501
        """Update profile type expression by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile_type_expression(profile_expression_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_expression_id: The ID of the profile type expression to update (required)
        :param ProfileTypeExpression body: The updated profile type expression (required)
        :return: ProfileTypeExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_profile_type_expression_with_http_info(profile_expression_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_profile_type_expression_with_http_info(profile_expression_id, body, **kwargs)  # noqa: E501
            return data

    def update_profile_type_expression_with_http_info(self, profile_expression_id, body, **kwargs):  # noqa: E501
        """Update profile type expression by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile_type_expression_with_http_info(profile_expression_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_expression_id: The ID of the profile type expression to update (required)
        :param ProfileTypeExpression body: The updated profile type expression (required)
        :return: ProfileTypeExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_expression_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_profile_type_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_expression_id' is set
        if self.api_client.client_side_validation and ('profile_expression_id' not in params or
                                                       params['profile_expression_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_expression_id` when calling `update_profile_type_expression`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_profile_type_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_expression_id' in params:
            path_params['profileExpressionId'] = params['profile_expression_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/profile-type-expressions/{profileExpressionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileTypeExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
