# coding: utf-8

"""
    Masking API

    Schema for the Continuous Compliance Engine API  # noqa: E501

    OpenAPI spec version: 5.1.18
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dxm.lib.masking_api.api_client import ApiClient


class MainframeDatasetRulesetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_mainframe_dataset_update(self, mainframe_dataset_ruleset_id, body, **kwargs):  # noqa: E501
        """Update the set of mainframe datasets and their attributes associated with a mainframe dataset ruleset in bulk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_mainframe_dataset_update(mainframe_dataset_ruleset_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the mainframe dataset ruleset to update the mainframe dataset for (required)
        :param MainframeDatasetMetadataBulkInput body: The exact list of mainframe datasets to put in the ruleset. Note that existing datasets for this ruleset not in this list will be deleted (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_mainframe_dataset_update_with_http_info(mainframe_dataset_ruleset_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_mainframe_dataset_update_with_http_info(mainframe_dataset_ruleset_id, body, **kwargs)  # noqa: E501
            return data

    def bulk_mainframe_dataset_update_with_http_info(self, mainframe_dataset_ruleset_id, body, **kwargs):  # noqa: E501
        """Update the set of mainframe datasets and their attributes associated with a mainframe dataset ruleset in bulk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_mainframe_dataset_update_with_http_info(mainframe_dataset_ruleset_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the mainframe dataset ruleset to update the mainframe dataset for (required)
        :param MainframeDatasetMetadataBulkInput body: The exact list of mainframe datasets to put in the ruleset. Note that existing datasets for this ruleset not in this list will be deleted (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mainframe_dataset_ruleset_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_mainframe_dataset_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mainframe_dataset_ruleset_id' is set
        if self.api_client.client_side_validation and ('mainframe_dataset_ruleset_id' not in params or
                                                       params['mainframe_dataset_ruleset_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mainframe_dataset_ruleset_id` when calling `bulk_mainframe_dataset_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `bulk_mainframe_dataset_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mainframe_dataset_ruleset_id' in params:
            path_params['mainframeDatasetRulesetId'] = params['mainframe_dataset_ruleset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mainframe-dataset-rulesets/{mainframeDatasetRulesetId}/bulk-mainframe-dataset-update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_mainframe_dataset_ruleset(self, mainframe_dataset_ruleset_id, body, **kwargs):  # noqa: E501
        """Copy mainframe dataset ruleset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_mainframe_dataset_ruleset(mainframe_dataset_ruleset_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the mainframe dataset ruleset to copy (required)
        :param MainframeDatasetRulesetCopy body: The name of the ruleset. This must be unique within an environment. (required)
        :return: MainframeDatasetRuleset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_mainframe_dataset_ruleset_with_http_info(mainframe_dataset_ruleset_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_mainframe_dataset_ruleset_with_http_info(mainframe_dataset_ruleset_id, body, **kwargs)  # noqa: E501
            return data

    def copy_mainframe_dataset_ruleset_with_http_info(self, mainframe_dataset_ruleset_id, body, **kwargs):  # noqa: E501
        """Copy mainframe dataset ruleset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_mainframe_dataset_ruleset_with_http_info(mainframe_dataset_ruleset_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the mainframe dataset ruleset to copy (required)
        :param MainframeDatasetRulesetCopy body: The name of the ruleset. This must be unique within an environment. (required)
        :return: MainframeDatasetRuleset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mainframe_dataset_ruleset_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_mainframe_dataset_ruleset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mainframe_dataset_ruleset_id' is set
        if self.api_client.client_side_validation and ('mainframe_dataset_ruleset_id' not in params or
                                                       params['mainframe_dataset_ruleset_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mainframe_dataset_ruleset_id` when calling `copy_mainframe_dataset_ruleset`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `copy_mainframe_dataset_ruleset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mainframe_dataset_ruleset_id' in params:
            path_params['mainframeDatasetRulesetId'] = params['mainframe_dataset_ruleset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mainframe-dataset-rulesets/{mainframeDatasetRulesetId}/copy', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MainframeDatasetRuleset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_mainframe_dataset_ruleset(self, body, **kwargs):  # noqa: E501
        """Create Mainframe Dataset ruleset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mainframe_dataset_ruleset(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MainframeDatasetRuleset body: The Mainframe Dataset ruleset to create (required)
        :return: MainframeDatasetRuleset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_mainframe_dataset_ruleset_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mainframe_dataset_ruleset_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_mainframe_dataset_ruleset_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Mainframe Dataset ruleset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mainframe_dataset_ruleset_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MainframeDatasetRuleset body: The Mainframe Dataset ruleset to create (required)
        :return: MainframeDatasetRuleset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mainframe_dataset_ruleset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_mainframe_dataset_ruleset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mainframe-dataset-rulesets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MainframeDatasetRuleset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_mainframe_dataset_ruleset(self, mainframe_dataset_ruleset_id, **kwargs):  # noqa: E501
        """Delete Mainframe Dataset ruleset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mainframe_dataset_ruleset(mainframe_dataset_ruleset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the Mainframe Dataset ruleset to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_mainframe_dataset_ruleset_with_http_info(mainframe_dataset_ruleset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_mainframe_dataset_ruleset_with_http_info(mainframe_dataset_ruleset_id, **kwargs)  # noqa: E501
            return data

    def delete_mainframe_dataset_ruleset_with_http_info(self, mainframe_dataset_ruleset_id, **kwargs):  # noqa: E501
        """Delete Mainframe Dataset ruleset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mainframe_dataset_ruleset_with_http_info(mainframe_dataset_ruleset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the Mainframe Dataset ruleset to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mainframe_dataset_ruleset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mainframe_dataset_ruleset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mainframe_dataset_ruleset_id' is set
        if self.api_client.client_side_validation and ('mainframe_dataset_ruleset_id' not in params or
                                                       params['mainframe_dataset_ruleset_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mainframe_dataset_ruleset_id` when calling `delete_mainframe_dataset_ruleset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mainframe_dataset_ruleset_id' in params:
            path_params['mainframeDatasetRulesetId'] = params['mainframe_dataset_ruleset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mainframe-dataset-rulesets/{mainframeDatasetRulesetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_mainframe_dataset_rulesets(self, **kwargs):  # noqa: E501
        """Get all Mainframe Dataset rulesets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_mainframe_dataset_rulesets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int environment_id: The ID of the environment to get all Mainframe Dataset rulesets from
        :param int page_number: The page number for which to get Mainframe Dataset rulesets. This will default to the first page if excluded
        :param int page_size: The maximum number of objects to return. This will default to the DEFAULT_API_PAGE_SIZE property if not provided
        :return: MainframeDatasetRulesetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_mainframe_dataset_rulesets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_mainframe_dataset_rulesets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_mainframe_dataset_rulesets_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Mainframe Dataset rulesets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_mainframe_dataset_rulesets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int environment_id: The ID of the environment to get all Mainframe Dataset rulesets from
        :param int page_number: The page number for which to get Mainframe Dataset rulesets. This will default to the first page if excluded
        :param int page_size: The maximum number of objects to return. This will default to the DEFAULT_API_PAGE_SIZE property if not provided
        :return: MainframeDatasetRulesetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment_id', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_mainframe_dataset_rulesets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'environment_id' in params:
            query_params.append(('environment_id', params['environment_id']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mainframe-dataset-rulesets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MainframeDatasetRulesetList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mainframe_dataset_ruleset_by_id(self, mainframe_dataset_ruleset_id, **kwargs):  # noqa: E501
        """Get Mainframe Dataset ruleset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mainframe_dataset_ruleset_by_id(mainframe_dataset_ruleset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the Mainframe Dataset ruleset to get (required)
        :return: MainframeDatasetRuleset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mainframe_dataset_ruleset_by_id_with_http_info(mainframe_dataset_ruleset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mainframe_dataset_ruleset_by_id_with_http_info(mainframe_dataset_ruleset_id, **kwargs)  # noqa: E501
            return data

    def get_mainframe_dataset_ruleset_by_id_with_http_info(self, mainframe_dataset_ruleset_id, **kwargs):  # noqa: E501
        """Get Mainframe Dataset ruleset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mainframe_dataset_ruleset_by_id_with_http_info(mainframe_dataset_ruleset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mainframe_dataset_ruleset_id: The ID of the Mainframe Dataset ruleset to get (required)
        :return: MainframeDatasetRuleset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mainframe_dataset_ruleset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mainframe_dataset_ruleset_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mainframe_dataset_ruleset_id' is set
        if self.api_client.client_side_validation and ('mainframe_dataset_ruleset_id' not in params or
                                                       params['mainframe_dataset_ruleset_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mainframe_dataset_ruleset_id` when calling `get_mainframe_dataset_ruleset_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mainframe_dataset_ruleset_id' in params:
            path_params['mainframeDatasetRulesetId'] = params['mainframe_dataset_ruleset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/mainframe-dataset-rulesets/{mainframeDatasetRulesetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MainframeDatasetRuleset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
