name: dxmc

on:
  push:
    branches: [ develop ]

    

jobs:
  centos7:

    runs-on: ubuntu-latest
    steps:
    - name: checkout dxtoolkit code
      uses: actions/checkout@master

    - name: Set up a Python container
      #uses: pioro/dxtoolkit@develop
      uses: docker://pioro/dxpythoncentos7:3.11.1
      with:
        ENCKEY: ${{ secrets.ENCKEY }}

    - name: Get the version
      id: get_version
      run: |
        if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
          SOURCE_TAG=${GITHUB_REF#refs/tags/}
        elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
          SOURCE_TAG=${GITHUB_REF#refs/heads/}
        else
          exit 1
        fi
        FILENAME="dxmc-${SOURCE_TAG}-redhat7.tar.gz"
        echo SOURCE_TAG=$SOURCE_TAG >> $GITHUB_ENV
        echo FILENAME=$FILENAME >> $GITHUB_ENV


    - name: rename toolkit
      run: |
        ls -l 
        pwd
        ls -l dist/
        mkdir dxmc
        cp dist/dxmc dxmc/dxmc
        tar czvf ${{ env.FILENAME }} dxmc/

    - name: Upload centos 7
      uses: actions/upload-artifact@v1
      with:
        name: cento7build
        path: ${{ env.FILENAME }}


  windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.11.1
      uses: actions/setup-python@v2
      with:
        python-version: 3.11.1

    - name: Get the version
      id: get_version
      run: |
        if (${env:GITHUB_REF} -match "tags") {
          $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/tags\/', ''
        } elseif (${env:GITHUB_REF} -match "heads") {
          $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/heads\/', ''
        } else {
          exit 1
        }
        $FILENAME="dxmc-" + $SOURCE_TAG + "-win64.zip"
        echo "SOURCE_TAG=$SOURCE_TAG" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "FILENAME=$FILENAME" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      shell: powershell

    - name: Fix encryption key
      run: |
        cd D:\a\dxm-toolkit\dxm-toolkit\dxm\lib\DxEngine
        ls -l secret.py
        mv secret.py secret.orig.py
        $raw = (Get-Content -path .\secret.orig.py -Raw) -replace 'changemechangemechagemechangemec','${{ secrets.ENCKEY }}'
        Set-Content -Path .\secret.py -Value $raw
        cd D:\a\dxm-toolkit\dxm-toolkit\
      shell: powershell

    - name: Install OpenSSL
      run: |
        choco install openssl 
        echo "INCLUDE=C:\\Program Files\\OpenSSL-Win64\\include;%INCLUDE%" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "LIB=C:\\Program Files\\OpenSSL-Win64\\lib;%LIB%" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        

    - name: Install dependencies
      run: |
        echo %INCLUDE%
        python -m pip install --upgrade pip
        python -m pip install pyinstaller
        python -m pip install six
        python setup.py install
        pip install pyinstaller
        pyinstaller --onefile --clean dxmc.py

    - name: compress toolkit
      run: |
        $NAME = "d:\a\dxm-toolkit\dxm-toolkit\${{ env.FILENAME }}"
        echo ${NAME}
        mkdir d:\a\dxm-toolkit\dxm-toolkit\dxmc
        copy d:\a\dxm-toolkit\dxm-toolkit\dist\dxmc.exe dxmc\
        Compress-Archive -Path d:\a\dxm-toolkit\dxm-toolkit\dxmc -DestinationPath ${NAME}
      shell: powershell
  
    - name: Upload windows
      uses: actions/upload-artifact@v1
      with:
        name: windowsbuild
        path: ${{ env.FILENAME }}

  osx:
    runs-on: macos-latest

    steps:
    - name: checkout dxtoolkit code
      uses: actions/checkout@master


    - name: Get the version
      id: get_version
      run: |
        if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
          SOURCE_TAG=${GITHUB_REF#refs/tags/}
        elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
          SOURCE_TAG=${GITHUB_REF#refs/heads/}
        else
          exit 1
        fi
        FILENAME="dxmc-${SOURCE_TAG}-osx.tar.gz"
        echo SOURCE_TAG=$SOURCE_TAG >> $GITHUB_ENV
        echo FILENAME=$FILENAME >> $GITHUB_ENV

    - name: fix password
      env:
        ENCKEY: ${{ secrets.ENCKEY }}
      run: |
        cd dxm/lib/DxEngine
        ls -l 
        mv secret.py secret.py.orig
        cat secret.py.orig | sed -e "s/changemechangemechagemechangemec/${ENCKEY}/" > secret.py
        ls -l 
        cd


    - name: run python
      run: |
          OPENLIB=`brew --prefix openssl`
          CDIR=`pwd`
          export LIBS="-l ${OPENLIB}/lib/libssl.dylib -l ${OPENLIB}/lib/libcrypto.dylib"
          echo $LIBS

          python3 -m venv /tmp/dxmc
          source /tmp/dxmc/bin/activate

          pip3 install --upgrade 'setuptools==65.5.0'
          pip3 install pyparsing==3.0.7
          pip3 install pyinstaller==5.13.0
          python3 setup.py install
          pyinstaller --onefile --clean --hidden-import pkg_resources dxmc.py
          
          cd ${CDIR}
          mkdir dxmc
          cp dist/dxmc dxmc/dxmc
          ls -l ./dxmc
          tar czvf ${{ env.FILENAME }} dxmc/dxmc

    - name: Upload OSX
      uses: actions/upload-artifact@v1
      with:
        name: osxbuild
        path: ${{ env.FILENAME }}
      
